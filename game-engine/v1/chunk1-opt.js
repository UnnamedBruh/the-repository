const UnnamedEngine=function(t){let e,r;if("string"==typeof t){if(e=document.getElementById(t),!e)throw new DOMError("The canvas element isn't found in the current environment.");if("canvas"!==e.tagName.toLowerCase())throw new DOMError("The 'canvas' element picked is not a canvas element.")}else if(t instanceof HTMLElement){if(!t)throw new TypeError("The canvas element isn't passed into the game engine.");if("canvas"!==t.tagName.toLowerCase())throw new DOMError("The 'canvas' element passed into the game engine is not a canvas element.")}else void 0===t&&(e=document.createElement("canvas"),document.body.appendChild(e),e.width=window.innerWidth,e.height=window.innerHeight);if(!e.getContext)throw new Error("The canvas element isn't supported in your browser, or the HTML runtime isn't working properly.");if(r=e.getContext("2d"),!r)throw new Error('The canvas context (currently "2d") isn\'t available in the canvas element. Make sure your browser supports the canvas element.');const s=[],n=new Set(["n","s"]);class i{#t=0;#e=0;constructor(t=0,e=0){if(!n.has((typeof t)[0])||!n.has((typeof e)[0]))throw new TypeError(`The X and Y must be numbers or numeric strings. The values were (${t}, ${e})`);if(this.#t=Number(t),this.#e=Number(e),isNaN(this.#t))throw new TypeError(`The X for a Vector2 must be a number or a numeric string (this value is '${this.#t}')`);if(isNaN(this.#e))throw new TypeError(`The Y for a Vector2 must be a number or a numeric string (this value is '${this.#e}')`)}get magnitude(){return Math.sqrt(this.#t*this.#t+this.#e*this.#e)}get unit(){const t=this.magnitude;return new i(this.#t/t,this.#e/t)}get x(){return this.#t}get y(){return this.#e}set x(t){return this.#t=Number(t),this.#t}set y(t){return this.#e=Number(t),this.#e}set magnitude(t){if(!n.has((typeof t)[0]))throw new Error(`The value setting the magnitude of a Vector2 must be a number or a numeric string (this value is '${t}')`);{const e=Number(t);if(isNaN(e))throw new Error(`The value setting the magnitude of a Vector2 must be a number or a numeric string (this value is '${t}')`);switch(e){case 1:const t=this.unit;return this.#t=t.x,this.#e=t.y,t;case 0:return this.#t=0,this.#e=0,new i(0,0);default:const r=this.magnitude;return this.#t=this.#t/r*e,this.#e=this.#e/r*e,new i(this.#t,this.#e)}}}sqrt(){return new i(Math.sqrt(this.#t),Math.sqrt(this.#e))}toIntVector2(){return new h(this.#t,this.#e)}add(t,e){if(t instanceof i){const e=new i(this.#t,this.#e);return e.x+=t.x,e.y+=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new i(this.#t,this.#e);return e.x+=t,e.y+=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new i(this.#t,this.#e);return r.x+=t,r.y+=e,r}throw new TypeError("The 'add' function part of the Vector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}sub(t,e){if(t instanceof i){const e=new i(this.#t,this.#e);return e.x-=t.x,e.y-=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new i(this.#t,this.#e);return e.x-=t,e.y-=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new i(this.#t,this.#e);return r.x-=t,r.y-=e,r}throw new TypeError("The 'sub' function part of the Vector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}mul(t,e){if(t instanceof i){const e=new i(this.#t,this.#e);return e.x*=t.x,e.y*=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new i(this.#t,this.#e);return e.x*=t,e.y*=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new i(this.#t,this.#e);return r.x*=t,r.y*=e,r}throw new TypeError("The 'mul' function part of the Vector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}div(t,e){if(t instanceof i){const e=new i(this.#t,this.#e);return e.x/=t.x,e.y/=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new i(this.#t,this.#e);return e.x/=t,e.y/=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new i(this.#t,this.#e);return r.x/=t,r.y/=e,r}throw new TypeError("The 'div' function part of the Vector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}exp(){return new i(Math.exp(this.#t),Math.exp(this.#e))}cbrt(){return new i(Math.cbrt(this.#t),Math.cbrt(this.#e))}}class h{#t=0;#e=0;constructor(t=0,e=0){if(!n.has((typeof t)[0])||!n.has((typeof e)[0]))throw new TypeError(`The X and Y must be numbers or numeric strings. The values were (${t}, ${e})`);if(this.#t=Math.floor(Number(t)),this.#e=Math.floor(Number(e)),isNaN(this.#t))throw new TypeError(`The X for a Vector2 must be a number or a numeric string (this value is '${this.#t}')`);if(isNaN(this.#e))throw new TypeError(`The Y for a Vector2 must be a number or a numeric string (this value is '${this.#e}')`)}set x(t){return this.#t=Math.floor(Number(t)),this.#t}set y(t){return this.#e=Math.floor(Number(t)),this.#e}exp(){return new h(Math.exp(this.#t),Math.exp(this.#e))}cbrt(){return new h(Math.cbrt(this.#t),Math.cbrt(this.#e))}sqrt(){return new h(Math.sqrt(this.#t),Math.sqrt(this.#e))}set magnitude(t){if(!n.has((typeof t)[0]))throw new Error(`The value setting the magnitude of a Vector2 must be a number or a numeric string (this value is '${t}')`);{const e=Number(t);if(isNaN(e))throw new Error(`The value setting the magnitude of a Vector2 must be a number or a numeric string (this value is '${t}')`);switch(e){case 1:const t=this.unit;return this.#t=t.x,this.#e=t.y,t;case 0:return this.#t=0,this.#e=0,new h(0,0);default:const r=this.magnitude;return this.#t=this.#t/r*e,this.#e=this.#e/r*e,new h(this.#t,this.#e)}}}add(t,e){if(t instanceof h){const e=new h(this.#t,this.#e);return e.x+=t.x,e.y+=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new h(this.#t,this.#e);return e.x+=t,e.y+=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new h(this.#t,this.#e);return r.x+=t,r.y+=e,r}throw new TypeError("The 'add' function part of the IntVector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}sub(t,e){if(t instanceof h){const e=new h(this.#t,this.#e);return e.x-=t.x,e.y-=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new h(this.#t,this.#e);return e.x-=t,e.y-=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new h(this.#t,this.#e);return r.x-=t,r.y-=e,r}throw new TypeError("The 'sub' function part of the IntVector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}mul(t,e){if(t instanceof h){const e=new h(this.#t,this.#e);return e.x*=t.x,e.y*=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new h(this.#t,this.#e);return e.x*=t,e.y*=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new h(this.#t,this.#e);return r.x*=t,r.y*=e,r}throw new TypeError("The 'mul' function part of the IntVector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}div(t,e){if(t instanceof h){const e=new h(this.#t,this.#e);return e.x/=t.x,e.y/=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new h(this.#t,this.#e);return e.x/=t,e.y/=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new h(this.#t,this.#e);return r.x/=t,r.y/=e,r}throw new TypeError("The 'div' function part of the IntVector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}toVector2(){return new i(this.#t,this.#e)}}function o(t){return t instanceof i||t instanceof h||t instanceof a}class u{#r=0;#s=0;#n=0;constructor(t=0,e,r){if(t=Number(t),isNaN(t)||void 0!==e||void 0!==r){if(e=Number(e),r=Number(r),isNaN(t)||isNaN(e)||isNaN(r))throw new TypeError("The Color3 class must be provided with: 1. One number or numerical string.\n2. Three values of any number or numerical string.");this.#r=Math.max(Math.min(Math.floor(t),255),0),this.#s=Math.max(Math.min(Math.floor(e),255),0),this.#n=Math.max(Math.min(Math.floor(r),255),0)}else t=Math.max(Math.min(Math.floor(t),255),0),this.#r=t,this.#s=t,this.#n=t}get r(){return this.#r}get g(){return this.#s}get b(){return this.#n}get R(){return this.#r}get G(){return this.#s}get B(){return this.#n}set r(t){if(t=Number(t),isNaN(t))throw new TypeError("The provided value must be a number, or a numerical string (setting the 'r' component to '"+t+"' has been halted)");return this.#r=Math.floor(t),this.#r}set g(t){if(t=Number(t),isNaN(t))throw new TypeError("The provided value must be a number, or a numerical string (setting the 'g' component to '"+t+"' has been halted)");return this.#s=Math.floor(t),this.#s}set b(t){if(t=Number(t),isNaN(t))throw new TypeError("The provided value must be a number, or a numerical string (setting the 'b' component to '"+t+"' has been halted)");return this.#n=Math.floor(t),this.#n}static black(){return new u(0)}static white(){return new u(255)}static red(){return new u(255,0,0)}static yellow(){return new u(255,255,0)}static green(){return new u(0,255,0)}static aqua(){return new u(0,255,255)}static blue(){return new u(0,0,255)}static purple(){return new u(128,0,255)}static pink(){return new u(255,0,255)}toCSS(){return`rgb(${this.#r},${this.#s},${this.#n})`}canBeAsHue(){return 0===this.#r&&0!==this.#s&&0!==this.#n||0!==this.#r&&0===this.#s&&0!==this.#n||0!==this.#r&&0!==this.#s&&0===this.#n}isGray(){return this.#r===this.#s&&this.#s===this.#n}get palette(){return"rgb"}}class a{#t=0;#e=0;#i=0;#h=0;constructor(t=0,e=0,r=100,s=100){if(!(n.has((typeof t)[0])&&n.has((typeof e)[0])&&n.has((typeof r)[0])&&n.has((typeof s)[0])))throw new TypeError(`The X, Y width and height must be numbers or numeric strings. The values were (${t}, ${e}, ${r}, ${s})`);if(this.#t=Number(t),this.#e=Number(e),this.#i=Number(r),this.#h=Number(s),isNaN(this.#t))throw new TypeError(`The X for a RectangleVector2 must be a number or a numeric string (this value is '${this.#t}')`);if(isNaN(this.#e))throw new TypeError(`The Y for a RectangleVector2 must be a number or a numeric string (this value is '${this.#e}')`);if(isNaN(this.#i))throw new TypeError(`The width for a RectangleVector2 must be a number or a numeric string (this value is '${this.#i}')`);if(isNaN(this.#h))throw new TypeError(`The height for a RectangleVector2 must be a number or a numeric string (this value is '${this.#h}')`)}get magnitudeOfPos(){return Math.sqrt(this.#t*this.#t+this.#e*this.#e)}get unitOfPos(){const t=this.magnitude;return new i(this.#t/t,this.#e/t)}get x(){return this.#t}get y(){return this.#e}set x(t){return this.#t=Number(t),this.#t}set y(t){return this.#e=Number(t),this.#e}set magnitudeOfPos(t){if(!n.has((typeof t)[0]))throw new Error(`The value setting the magnitude of a RectangleVector2 must be a number or a numeric string (this value is '${t}')`);{const e=Number(t);if(isNaN(e))throw new Error(`The value setting the magnitude of a RectangleVector2 must be a number or a numeric string (this value is '${t}')`);switch(e){case 1:const t=this.unit;return this.#t=t.x,this.#e=t.y,t;case 0:return this.#t=0,this.#e=0,new i(0,0);default:const r=this.magnitude;return this.#t=this.#t/r*e,this.#e=this.#e/r*e,new i(this.#t,this.#e)}}}sqrtOfPos(){return new i(Math.sqrt(this.#t),Math.sqrt(this.#e))}toIntVector2(){return new h(this.#t,this.#e)}toVector2(){return new i(this.#t,this.#e)}addAndToVector2(t,e){if(o(t)){const e=new i(this.#t,this.#e);return e.x+=t.x,e.y+=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new i(this.#t,this.#e);return e.x+=t,e.y+=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new i(this.#t,this.#e);return r.x+=t,r.y+=e,r}throw new TypeError("The 'add' function part of the RectangleVector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}subAndToVector2(t,e){if(o(t)){const e=new i(this.#t,this.#e);return e.x-=t.x,e.y-=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new i(this.#t,this.#e);return e.x-=t,e.y-=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new i(this.#t,this.#e);return r.x-=t,r.y-=e,r}throw new TypeError("The 'sub' function part of the RectangleVector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}mulAndToVector2(t,e){if(o(t)){const e=new i(this.#t,this.#e);return e.x*=t.x,e.y*=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new i(this.#t,this.#e);return e.x*=t,e.y*=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new i(this.#t,this.#e);return r.x*=t,r.y*=e,r}throw new TypeError("The 'mul' function part of the RectangleVector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}divAndToVector2(t,e){if(o(t)){const e=new i(this.#t,this.#e);return e.x/=t.x,e.y/=t.y,e}if(void 0===e&&"n"===(typeof t)[0]){const e=new i(this.#t,this.#e);return e.x/=t,e.y/=t,e}if("n"===(typeof t)[0]&&"n"===(typeof e)[0]){const r=new i(this.#t,this.#e);return r.x/=t,r.y/=e,r}throw new TypeError("The 'div' function part of the RectangleVector2 class must be provided with either:\n1. Another Vector2.\n2. A number.\n3. Two numbers.")}expOfPos(){return new i(Math.exp(this.#t),Math.exp(this.#e))}cbrtOfPos(){return new i(Math.cbrt(this.#t),Math.cbrt(this.#e))}get area(){return this.#i*this.#h}set area(t){if(!n.has((typeof t)[0]))throw new TypeError("The area must be set to a value that is a number or a numeric string");if(t=Math.sqrt(Number(t)),isNaN(t))throw new TypeError("Either the value is not positive, or the value is a string and isn't numerical");this.#i=t,this.#h=t}get pivotCenter(){return new i(this.#t+this.#i/2,this.#e+this.#h/2)}isPointInBounds(t,e){if(o(t))return this.#t<=t.x&&t.x<=this.#t+this.#i&&this.#e<=t.y&&t.y<=this.#e+this.#h;if(n.has((typeof t)[0])&&n.has((typeof e)[0])){if(t=Number(t),isNaN(t))throw new TypeError("The X position passed into the 'isPointInBounds' function is a string, but isn't numerical");if(e=Number(e),isNaN(e))throw new TypeError("The Y position passed into the 'isPointInBounds' function is a string, but isn't numerical");return this.#t<=t&&t<=this.#t+this.#i&&this.#e<=e&&e<=this.#e+this.#h}throw new TypeError("The Vector2 or X and Y positions passed are not a Vector2 or numbers or numeric strings")}}class p{get type(){return"instance"}}const c={version:0,versionID:"V1.0"};return p.SquareDisplay=class extends p{#o=null;#u=null;#a=!0;#p=!1;#c=null;constructor(t=0,e=0,r=100,n=100,i,o){if(super(),this.#o=new h(t,e),this.#u=new h(r,n),this.#a=!!o,i instanceof u)this.#c=i;else{if(void 0!==i)throw new TypeError("The provided color must be a Color3 class to be used");this.#c=u.black()}s.push(this)}get class(){return"SquareDisplay"}get position(){return this.#o}get x(){return this.#o.x}get y(){return this.#o.y}set x(t){return this.#o.x=t,this.#o.x}set y(t){return this.#o.y=t,this.#o.y}get width(){return this.#u.x}get height(){return this.#u.y}set width(t){return this.#u.x=t,this.#u.x}set height(t){return this.#u.y=t,this.#u.y}get color(){return this.#c}get visible(){return this.#a}set visible(t){return this.#a=!!t,this.#a}remove(){s.splice(s.findIndex((t=>t===this)),1),this.#p=!0}get removed(){this.#p}get classIndex(){return 0}},c.Instance=p,c.Color={Color3:u},c.Vector={Vector2:i,IntVector2:h,RectangleVector2:a},c.runtime={backgroundColor:u.black()},c.runtime.render=function(){r.fillStyle=c.runtime.backgroundColor.toCSS(),r.fillRect(0,0,+e.width,+e.height);for(const t of s)if(0===t.classIndex)t.visible&&(r.fillStyle=t.color.toCSS(),r.fillRect(t.x,t.y,t.width,t.height))},c};
